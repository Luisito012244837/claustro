import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import '../../assets/styles/Authentication.css';
import '../../assets/styles/Login.css';

const Login = () => {
    const navigate = useNavigate();
    const [showPassword, setShowPassword] = useState(false);

    const handleSubmit = async (event) => {
        event.preventDefault();

        const usernameInput = event.target.username.value.trim();
        const password = event.target.password.value;

        if (!usernameInput) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'El nombre de usuario no puede estar vac√≠o.',
            });
            return;
        }


       
        if (!password) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'La contrase√±a no puede estar vac√≠a.',
            });
            return;
        }

        const data = {
            username: usernameInput,
            password: password
        };

        try {
            const response = await fetch('http://10.10.1.1:8000/api/v1/login/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                const result = await response.json();

                const token = result.token || result.Token;


                              
                let username = usernameInput;

                // Si hay un objeto user en la respuesta, intentar obtener el username de all√≠
                if (result.user && result.user.username) {
                    username = result.user.username;
                }

                // Obtener el rol del usuario de la respuesta
                let userRole = 'user'; // Valor predeterminado
                if (result.user && result.user.role) {
                    userRole = result.user.role;
                }

                if (token) {
                    try {
                        // Limpiar valores anteriores
                        localStorage.clear();

                               
                        // Guardar nuevos valores
                        localStorage.setItem('token', token);
                        localStorage.setItem('username', username);

                        localStorage.setItem('userRole', userRole); // Guardar el rol del usuario
                               
                        // Verificaci√≥n inmediata
                        const storedUsername = localStorage.getItem('username');

                               
                        // Si localStorage falla, usar sessionStorage
                        if (!storedUsername) {
                            console.log('localStorage fall√≥, usando sessionStorage');
                            sessionStorage.setItem('token', token);
                            sessionStorage.setItem('username', username);
                            sessionStorage.setItem('userRole', userRole); // Guardar el rol en sessionStorage tambi√©n
                        }
                    } catch (storageError) {
                        try {
                            sessionStorage.setItem('token', token);
                            sessionStorage.setItem('username', username);

                            sessionStorage.setItem('userRole', userRole); // Guardar el rol en sessionStorage
                        } catch (e) {

                            // Error al guardar en sessionStorage
                        }
                    }
                }

                await Swal.fire({
                    icon: 'success',
                    title: '¬°Inicio de sesi√≥n exitoso!',
                    text: 'Bienvenido a nuestra web.',
                });

               
                // Crear un evento personalizado para notificar al NavBar


                const loginEvent = new CustomEvent('userLoggedIn', {
                    detail: { username: username, role: userRole }
                });
                window.dispatchEvent(loginEvent);

               
                // Navegar a welcome
                navigate('/welcome');
            } else {
                const errorData = await response.json().catch(() => ({}));

               
                try {
                    localStorage.removeItem('token');
                    localStorage.removeItem('username');
                    localStorage.removeItem('userRole'); // Eliminar tambi√©n el rol
                    sessionStorage.removeItem('token');
                    sessionStorage.removeItem('username');
                    sessionStorage.removeItem('userRole'); // Eliminar tambi√©n el rol
                } catch (e) {
                    console.error('Error al limpiar storage:', e);
                }

               
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorData.message || 'Hubo un problema al iniciar sesi√≥n.',
                });
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);

           
            try {
                localStorage.removeItem('token');
                localStorage.removeItem('username');
                localStorage.removeItem('userRole'); // Eliminar tambi√©n el rol
                sessionStorage.removeItem('token');
                sessionStorage.removeItem('username');
                sessionStorage.removeItem('userRole'); // Eliminar tambi√©n el rol
            } catch (e) {
                console.error('Error al limpiar storage:', e);
            }

            Swal.fire({
                icon: 'error',
                title: 'Error de conexi√≥n',
                text: 'No se pudo conectar al servidor. Int√©ntalo de nuevo m√°s tarde.',
            });
        }
    };

    return (
        <div className="login-page">
            <div className="login-container">
                <h2>Iniciar Sesi√≥n</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="username">Usuario</label>





                        <input
                            type="text"
                            id="username"
                            name="username"
                            required
                        />
                    </div>
                    <div className="form-group password-group">
                        <label htmlFor="password">Contrase√±a</label>





                        <input
                            type={showPassword ? "text" : "password"}
                            id="password"
                            name="password"
                            required
                        />
                        <button
                            type="button"
                            className="show-password-icon"
                            onClick={() => setShowPassword(!showPassword)}
                            aria-label={showPassword ? "Ocultar contrase√±a" : "Mostrar contrase√±a"}
                        >
                            {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                        </button>
                    </div>
                    <button type="submit">Iniciar Sesi√≥n</button>
                    <div className="register-link">
                        <a href="/change-password">Cambiar Contrase√±a</a>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default Login;







import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import '../../assets/styles/Home.css';
import '../../assets/styles/Authentication.css';
import { useTheme } from './ThemeContext';

const NavBar = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [notification, setNotification] = useState('');
  const [username, setUsername] = useState('');
  const authMenuRef = useRef(null);
  const navigate = useNavigate();
  const location = useLocation();
  const { darkMode, toggleTheme } = useTheme();

  // Funci√≥n para obtener el nombre de usuario del almacenamiento
  const getUsernameFromStorage = () => {
    try {
      // Intentar primero localStorage, luego sessionStorage
      const storedUsername = localStorage.getItem('username') || sessionStorage.getItem('username');
      return storedUsername || '';
    } catch (error) {
      console.error('Error al acceder al storage:', error);
      return '';
    }
  };

  // Obtener el nombre de usuario al cargar el componente y cuando cambia la ruta
  useEffect(() => {
    const storedUsername = getUsernameFromStorage();
    if (storedUsername) {
      setUsername(storedUsername);
    }
  }, [location.pathname]);

  // Escuchar el evento personalizado de inicio de sesi√≥n
  useEffect(() => {
    const handleUserLogin = (event) => {
      console.log('Evento de login detectado:', event.detail);
      if (event.detail && event.detail.username) {
        setUsername(event.detail.username);
      }
    };

    window.addEventListener('userLoggedIn', handleUserLogin);
    
    return () => {
      window.removeEventListener('userLoggedIn', handleUserLogin);
    };
  }, []);

  const toggleMenu = (e) => {
    e.stopPropagation();
    setIsMenuOpen(!isMenuOpen);
  };

  const showNotification = (message) => {
    setNotification(message);
    setTimeout(() => {
      setNotification('');
    }, 3000);
  };

  const handleLogout = () => {
    try {
      localStorage.removeItem('token');
      localStorage.removeItem('username');
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('username');
    } catch (e) {
      console.error('Error al limpiar storage durante logout:', e);
    }
    
    setIsMenuOpen(false);
    setUsername('');
    navigate('/login');
  };

  const useClickOutside = (ref, callback) => {
    useEffect(() => {
      const handleClickOutside = (event) => {
        if (ref.current && !ref.current.contains(event.target)) {
          callback();
        }
      };
      document.addEventListener('mousedown', handleClickOutside);
      return () => {
        document.removeEventListener('mousedown', handleClickOutside);
      };
    }, [ref, callback]);
  };

  useClickOutside(authMenuRef, () => setIsMenuOpen(false));

  return (
    <div className="navbar">
      <h1>AKADEMIA</h1>
      <div className="auth-container">
        {username ? (
          <div className="username-display">
            <span>Bienvenido, </span>
            <span className="username-text">{username}</span>
          </div>
        ) : (
          <div className="username-display">
            <span>No has iniciado sesi√≥n</span>
          </div>
        )}
        <span
          className="notification-icon"
          onClick={() => showNotification('¬°Tienes nuevas notificaciones!')}
        >
          üîî
        </span>
        {notification && <div className="notification-message">{notification}</div>}
        <button
          onClick={toggleTheme}
          className="theme-toggle"
          aria-label={darkMode ? 'Cambiar a modo claro' : 'Cambiar a modo oscuro'}
        >
          {darkMode ? '‚òÄÔ∏è' : 'üåô'}
        </button>
        <button onClick={toggleMenu}>
          {username ? 'Mi Cuenta' : 'Autenticarse'}
        </button>
        {isMenuOpen && (
          <div className="auth-menu" ref={authMenuRef}>
            {!username && (
              <Link to="/login" className="auth-menu-item" onClick={toggleMenu}>
                Iniciar Sesi√≥n
              </Link>
            )}
            {username && (
              <button className="auth-menu-item" onClick={handleLogout}>
                Cerrar Sesi√≥n
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default NavBar;
